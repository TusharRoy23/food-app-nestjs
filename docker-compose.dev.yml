version: '3.1'
services:
  db:
    container_name: mongodb
    image: mongo:${MONGODB_VERSION}
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGODB_DATABASE}
    ports:
      - ${MONGODB_PORT}:${MONGODB_PORT}
    volumes:
      - ./mongodb:/data/db
      - ./init-dev-mongo.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    restart: unless-stopped
    networks:
      - food_dev_api
  mongo-express:
    image: mongo-express
    container_name: mongo-express
    restart: unless-stopped
    ports:
      - ${MONGO_EXPRESS_PORT}:8081
    environment:
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=false
      - ME_CONFIG_MONGODB_AUTH_DATABASE=${MONGODB_DATABASE}
      - ME_CONFIG_BASICAUTH_USERNAME=${MONGO_EXPRESS_USERNAME}
      - ME_CONFIG_BASICAUTH_PASSWORD=${MONGO_EXPRESS_PASSWORD}
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGODB_ROOT_USERNAME}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGODB_ROOT_PASSWORD}
      - ME_CONFIG_MONGODB_SERVER=mongodb
    depends_on:
      db:
        condition: service_started
    networks:
      - food_dev_api
  fooddev:
    container_name: food-dev
    build:
      context: .
      dockerfile: ./dockerfiles/Dockerfile-dev
    image: food-api
    env_file:
      - ./env/.dev.env
    volumes:
      - .:/app # create volumn in current directory of container
      - /app/node_modules # anonymus/unnamed volumn in container
    ports:
      - "${APP_PORT}:${APP_PORT}"
    depends_on:
      db:
        condition: service_started
      # esFood01:
      #   condition: service_completed_successfully
    restart: unless-stopped
    networks:
      - food_dev_api
  esFood01:
    container_name: esFood01
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELK_VERSION}
    env_file:
      - ./env/.dev.env
    volumes:
      - ./esFoodData01:/usr/share/elasticsearch/data
    ports:
      - ${ES_HOST_PORT}:9200
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - food_dev_api
  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:${ELK_VERSION}
    environment:
      - ELASTICSEARCH_HOSTS=${ELASTICSEARCH_NODE}
      - ELASTICSEARCH_USERNAME=${ELASTICSEARCH_USERNAME}
      - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD}
    ports:
      - ${KIBANA_HOST_PORT}:5601
    depends_on:
      esFood01:
        condition: service_started
    networks:
      - food_dev_api
  # redis:
  #   image: redis/redis-stack-server:${REDIS_VERSION}
  #   env_file:
  #     - ./env/.dev.env
  #   container_name: redis-stack-server
  #   volumes:
  #     - ./redis-data:/data
  #   networks:
  #     - food_dev_api
  #   ports:
  #     - "${REDIS_PORT}:${REDIS_PORT}"
  #   restart: unless-stopped
networks:
  food_dev_api:
    driver: bridge

volumes:
  mongodb:
  esFoodData01:
  redis-data:
